#!/bin/bash

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    --kustomization_path)
    KUSTOMIZATION_PATH="$2"
    shift # past argument
    shift # past value
    ;;
    --kubernetes_server)
    KUBERNETES_SERVER="$2"
    shift # past argument
    shift # past value
    ;;
    --kubernetes_token)
    KUBERNETES_TOKEN="$2"
    shift # past argument
    shift # past value
    ;;
    --docker_registry)
    DOCKER_REGISTRY="$2"
    shift # past argument
    shift # past value
    ;;
    --docker_repository)
    DOCKER_REPOSITORY="$2"
    shift # past argument
    shift # past value
    ;;
    --docker_tag)
    DOCKER_TAG="$2"
    shift # past argument
    shift # past value
    ;;
    --k8s_configmap_name)
    K8S_CONFIGMAP_NAME="$2"
    shift # past argument
    shift # past value
    ;;
    --k8s_configmap_namespace)
    K8S_CONFIGMAP_NAMESPACE="$2"
    shift # past argument
    shift # past value
    ;;
    --k8s_configmap_manual_dockerimage_sha256)
    K8S_CONFIGMAP_MANUAL_DOCKERIMAGE_SHA256="$2"
    shift # past argument
    shift # past value
    ;;
    --k8s_configmap_auto_dockerimage_url)
    K8S_CONFIGMAP_AUTO_DOCKERIMAGE_URL="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    #POSITIONAL+=("$1") # save it in an array for later
    #shift # past argument
    echo "Unknown option(s) $1 $2"
    return -3
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

echo "DOCKER_REGISTRY       = ${DOCKER_REGISTRY}"
echo "DOCKER_REPOSITORY     = ${DOCKER_REPOSITORY}"
echo "DOCKER_TAG            = ${DOCKER_TAG}"
echo "KUSTOMIZATION_PATH    = ${KUSTOMIZATION_PATH}"
echo "KUBERNETES_SERVER     = ${KUBERNETES_SERVER}"
echo "KUBERNETES_TOKEN      = ${KUBERNETES_TOKEN}"
echo "K8S_CONFIGMAP_NAME = ${K8S_CONFIGMAP_NAME}"
echo "K8S_CONFIGMAP_NAMESPACE = ${K8S_CONFIGMAP_NAMESPACE}"
echo "K8S_CONFIGMAP_MANUAL_DOCKERIMAGE_SHA256 = ${K8S_CONFIGMAP_MANUAL_DOCKERIMAGE_SHA256}"
echo "K8S_CONFIGMAP_AUTO_DOCKERIMAGE_URL = ${K8S_CONFIGMAP_AUTO_DOCKERIMAGE_URL}"

if [[ -z "${KUSTOMIZATION_PATH}" ]]; then
  echo "KUSTOMIZATION_PATH is a mandatory argument"
  return -1
fi
if [[ -z "${KUBERNETES_SERVER}" ]]; then
  echo "KUBERNETES_SERVER is a mandatory argument"
  return -1
fi
if [[ -z "${KUBERNETES_TOKEN}" ]]; then
  echo "KUBERNETES_TOKEN is a mandatory argument"
  return -1
fi
if [[ -z "${DOCKER_REGISTRY}" ]]; then
  echo "DOCKER_REGISTRY is a mandatory argument"
  return -1
fi
if [[ -z "${DOCKER_REPOSITORY}" ]]; then
  echo "DOCKER_REPOSITORY is a mandatory argument"
  return -1
fi
if [[ -z "${DOCKER_TAG}" ]]; then
  echo "DOCKER_TAG is a mandatory argument"
  return -1
fi

PRE_PWD=`pwd`
cd $KUSTOMIZATION_PATH
if [ -f "secfiles.yaml" ]; then
    echo "secfiles.yaml exists. Sopsing..."
    sops -d secfiles.yaml > secfiles_unencrypted.yaml
fi
sops -d secret.yaml > secret_unencrypted.yaml
kustomize edit set image ${DOCKER_REPOSITORY}=${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}:${DOCKER_TAG}
if [[ -n "${K8S_CONFIGMAP_MANUAL_DOCKERIMAGE_SHA256}" ]]; then
  cat <<EOF >manual_dockerimage_sha256.json
[
  {"op": "add",
   "path": "/data/DOCKERIMAGE_SHA256",
   "value": "$K8S_CONFIGMAP_MANUAL_DOCKERIMAGE_SHA256"}
]
EOF
  kustomize edit add patch --path manual_dockerimage_sha256.json --kind ConfigMap --name $K8S_CONFIGMAP_NAME --namespace $K8S_CONFIGMAP_NAMESPACE --version v1
fi

if [[ -n "${K8S_CONFIGMAP_AUTO_DOCKERIMAGE_URL}" ]]; then
  cat <<EOF >auto_dockerimage_url.json
[
  {"op": "add",
   "path": "/data/DOCKERIMAGE_URL",
   "value": "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}:${DOCKER_TAG}"}
]
EOF
  kustomize edit add patch --path auto_dockerimage_url.json --kind ConfigMap --name $K8S_CONFIGMAP_NAME --namespace $K8S_CONFIGMAP_NAMESPACE --version v1
fi

kustomize build . > kubernetes.yaml
kubectl --server=$KUBERNETES_SERVER --insecure-skip-tls-verify --token $KUBERNETES_TOKEN apply -f kubernetes.yaml
rm secret_unencrypted.yaml kubernetes.yaml

DIR="$KUSTOMIZATION_PATH/../../common"
echo "Looking for common kubernetes resource file in ${DIR}..."
if [ -d "$DIR" ]; then
  for entry in "$DIR"/*
    do
      echo Found "$entry"
      kubectl --server=$KUBERNETES_SERVER --insecure-skip-tls-verify --token $KUBERNETES_TOKEN apply -f "$DIR"/"$entry"
    done
fi

cd $PRE_PWD

#echo "Number files in SEARCH PATH with EXTENSION:" $(ls -1 "${SEARCHPATH}"/*."${EXTENSION}" | wc -l)
#if [[ -n $1 ]]; then
#    echo "Last line of file specified as non-opt/last argument:"
#    tail -1 "$1"
#fi